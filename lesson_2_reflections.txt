Initializing the repository turns a directory, empty or not,
into a git repository. You need to do this so you can use
git and version control with a set of files or single file.

The staging area is different from the working directory 
because the staging area doesn't neccesarily contain all of 
the files in the directory, it only contains the ones that
are about the be commited to the repository. The staging
area gives control over what changes you want to add to
your repository with any given commit so you can sort
everything into logical changes.

You can pick and choose what files get added to the staging
area so you can assure that files that are logically similar
are grouped together.

Branches would be helpful if you want to experiment with new
changes but still want to have a working copy to show to the
world. It can also help organize these big changes by keeping 
them seperate from the smaller bug fixes in the master file.

The diagrams help me see the branch structure because they
clearly show from which commit each branch stems from and
how many commits forward they are.

The result of merging two branches together is a single 
branch and commit that has the changes and commits from both
branches in its history and files. It is represented in the 
diagram as two lines combining into one and it is like this 
because merging takes two seperate branches and makes them
one.

Git's automatic merging can quickly combine two branches 
however if changes have been made to both of the branches
then it will raise a conflict. This is a good thing as it gives
the programmer more control over what will be in the final
version than if git just combined everything willy nilly.